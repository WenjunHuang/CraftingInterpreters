{
tokens=[
SPACE='regexp:\s+'
COMMENT='regexp://.*'
NUMBER='regexp:\d+(\.\d*)?'
IDENTIFIER='regexp:\p{Alpha}\w*'
STRING="regexp:('([^'\\]\\.)*'|\"([^\"\\]|\\.)*\")"
]

extends(".*Expr") = expression
extends(".*Stmt") = statement
}

program ::= declaration * <<eof>>
declaration ::= varDecl | statement
varDecl ::= "var" IDENTIFIER ("=" expression )? ";"
statement ::= printStmt | blockStmt | ifStmt | whileStmt |exprStmt
whileStmt ::= "while" "(" expression ")" statement
printStmt ::= "print" expression ";"
blockStmt ::= "{" declaration * "}"
ifStmt ::= "if" "(" expression ")" statement ("else" statement)?
exprStmt ::= expression ";"

expression ::= assignmentExpr
assignmentExpr ::= IDENTIFIER '=' assignmentExpr | logicOrExpr
logicOrExpr ::= logicAndExpr ('or' logicAndExpr)*
logicAndExpr ::= equalityExpr ('and' equalityExpr)*
equalityExpr ::= comparisonExpr (('!=' | '==') comparisonExpr)*
comparisonExpr ::= termExpr (('>'|'>='|'<'|'<=') termExpr)*
termExpr ::= factorExpr (( '-'|'+') factorExpr)*
factorExpr ::= unaryExpr (('/'|'*') unaryExpr)*
unaryExpr ::= ('!'|'-') unaryExpr | primaryExpr
primaryExpr ::= NUMBER | STRING | 'true' | 'false' | 'nil' | '(' expression ')' | IDENTIFIER


