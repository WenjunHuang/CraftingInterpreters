{
tokens=[
SPACE='regexp:\s+'
COMMENT='regexp://.*'
NUMBER='regexp:\d+(\.\d*)?'
IDENTIFIER='regexp:\p{Alpha}\w*'
STRING="regexp:('([^'\\]\\.)*'|\"([^\"\\]|\\.)*\")"
]

extends(".*Expr") = expression
extends(".*Stmt") = statement
}

program ::= declaration * <<eof>>
declaration ::= funDecl | varDecl | statement
funDecl ::= "fun" function
function ::= IDENTIFIER "(" parameters? ")" blockStmt
parameters ::= IDENTIFIER ("," IDENTIFIER)*
varDecl ::= "var" IDENTIFIER ("=" expression )? ";"
statement ::= printStmt | blockStmt | ifStmt | whileStmt |forStmt|returnStmt|exprStmt
returnStmt ::= "return" expression? ";"
whileStmt ::= "while" "(" expression ")" statement
printStmt ::= "print" expression ";"
blockStmt ::= "{" declaration * "}"
ifStmt ::= "if" "(" expression ")" statement ("else" statement)?
exprStmt ::= expression ";"
forStmt ::= "for" "(" (varDecl | exprStmt |";") expression? ";" expression? ")" statement

expression ::= assignmentExpr
assignmentExpr ::= IDENTIFIER '=' assignmentExpr | logicOrExpr
logicOrExpr ::= logicAndExpr ('or' logicAndExpr)*
logicAndExpr ::= equalityExpr ('and' equalityExpr)*
equalityExpr ::= comparisonExpr (('!=' | '==') comparisonExpr)*
comparisonExpr ::= termExpr (('>'|'>='|'<'|'<=') termExpr)*
termExpr ::= factorExpr (( '-'|'+') factorExpr)*
factorExpr ::= unaryExpr (('/'|'*') unaryExpr)*
unaryExpr ::= ('!'|'-') unaryExpr | callExpr
callExpr ::= primaryExpr ("(" arguments? ")")*
arguments ::= expression ("," expression)*
primaryExpr ::= NUMBER | STRING | 'true' | 'false' | 'nil' | '(' expression ')' | IDENTIFIER


