{
psiPackage = "com.github.wenjunhuang.lox.ideaplugin.psi"
psiImplPackage = "com.github.wenjunhuang.lox.ideaplugin.psi.impl"
parserClass = "com.github.wenjunhuang.lox.ideaplugin.LoxParser"
parserUtilClass="com.github.wenjunhuang.lox.ideaplugin.LoxParserUtil"
elementTypeHolderClass = "com.github.wenjunhuang.lox.ideaplugin.LoxTypes"
elementTypeClass = "com.github.wenjunhuang.lox.ideaplugin.LoxElementType"
tokenTypeClass="com.github.wenjunhuang.lox.ideaplugin.LoxTokenType"

tokens=[
LINE_COMMENT='regexp://.*'
BLOCK_COMMENT = 'regexp:/\*(.|\n)*\*/'
NUMBER='regexp:\d+(\.\d*)?'
IDENTIFIER='regexp:\p{Alpha}\w*'
STRING="regexp:('([^'\\]\\.)*'|\"([^\"\\]|\\.)*\")"
SPACE='regexp:\s+'

//SEMICOLON = ';'
//FUN = 'fun'
//IF = 'if'
//ELSE = 'else'
//FOR = 'for'
//WHILE = 'while'
//EQUAL = '='
//EQUAL_EQUAL = '=='
//LEFT_PAREN = '('
//RIGHT_PAREN = ')'
//LEFT_BRACE = '{'
//RIGHT_BRACE = '}'
//COMMA = ','
//DOT = '.'
//MINUS = '-'
//PLUS = '+'
//SLASH = '/'
//STAR = '*'
//BANG = '!'
//BANG_EQUAL = '!='
//GREATER = '>'
//GREATER_EQUAL = '>='
//LESS = '<'
//LESS_EQUAL = '<='
//AND = 'and'
//OR = 'or'
//CLASS = 'class'
//TRUE = 'true'
//FALSE = 'false'
//NIL = 'nil'
//PRINT = 'print'
//RETURN = 'return'
//SUPER = 'super'
//INIT = 'init'
//THIS = 'this'
//VAR = 'var'
//CLASS = 'class'

]

extends(".*Expr") = expression
extends(".*Stmt") = statement
}
program ::= declaration *
declaration ::= varDecl | classDecl |  funDecl| statement
classDecl ::= "class" IDENTIFIER "{" (initializer | function)* "}"
initializer ::= "init" "(" parameters? ")" blockStmt
funDecl ::= "fun" function
function ::= IDENTIFIER "(" parameters? ")" blockStmt
parameters ::= IDENTIFIER ("," IDENTIFIER)*
varDecl ::= "var" IDENTIFIER ("=" expression )? ";"
statement ::= printStmt | blockStmt | ifStmt | whileStmt |forStmt|returnStmt|exprStmt
returnStmt ::= "return" expression? ";"
whileStmt ::= "while" "(" expression ")" statement
printStmt ::= "print" expression ";"
blockStmt ::= "{" declaration * "}"
ifStmt ::= "if" "(" expression ")" statement ("else" statement)?
exprStmt ::= expression ";"
forStmt ::= "for" "(" (varDecl | exprStmt |";") expression? ";" expression? ")" statement

expression ::= assignmentExpr {pin = 1}
assignmentExpr ::= (callExpr ".")? IDENTIFIER '=' assignmentExpr | logicOrExpr
logicOrExpr ::= logicAndExpr ('or' logicAndExpr)*
logicAndExpr ::= equalityExpr ('and' equalityExpr)*
equalityExpr ::= comparisonExpr (('!=' | '==') comparisonExpr)*
comparisonExpr ::= termExpr (('>'|'>='|'<'|'<=') termExpr)*
termExpr ::= factorExpr (( '-'|'+') factorExpr)*
factorExpr ::= unaryExpr (('/'|'*') unaryExpr)*
unaryExpr ::= ('!'|'-') unaryExpr | callExpr
callExpr ::= primaryExpr ("(" arguments? ")" | "." IDENTIFIER)*
arguments ::= expression ("," expression)*
primaryExpr ::= NUMBER | STRING | 'this' | 'true' | 'false' | 'nil' | IDENTIFIER | '(' expression ')'
