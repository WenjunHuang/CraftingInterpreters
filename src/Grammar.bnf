{
tokens=[
SPACE='regexp:\s+'
COMMENT='regexp://.*'
NUMBER='regexp:\d+(\.\d*)?'
IDENTIFIER='regexp:\p{Alpha}\w*'
STRING="regexp:('([^'\\]\\.)*'|\"([^\"\\]|\\.)*\")"
]

extends(".*Expr") = expression
extends(".*Stmt") = statement
}

program ::= declaration * <<eof>>
declaration ::= varDecl | statement
varDecl ::= "var" IDENTIFIER ("=" expression )? ";"
statement ::= exprStmt | printStmt | blockStmt
exprStmt ::= expression ";"
printStmt ::= "print" expression ";"
blockStmt ::= "{" declaration * "}"

expression ::= assignmentExpr
assignmentExpr ::= IDENTIFIER '=' assignmentExpr | equalityExpr
equalityExpr ::= comparisonExpr (('!=' | '==') comparisonExpr)*
comparisonExpr ::= termExpr (('>'|'>='|'<'|'<=') termExpr)*
termExpr ::= factorExpr (( '-'|'+') factorExpr)*
factorExpr ::= unaryExpr (('/'|'*') unaryExpr)*
unaryExpr ::= ('!'|'-') unaryExpr | primaryExpr
primaryExpr ::= NUMBER | STRING | 'true' | 'false' | 'nil' | '(' expression ')' | IDENTIFIER


